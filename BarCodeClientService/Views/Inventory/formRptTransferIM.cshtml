@{
    ViewData["Title"] = "Inventory Transfer IM Report";
    var dt = DateTime.Now;
    ViewData["Date"] = dt.ToShortDateString();
}

<link href="~/css/styles.css" rel="stylesheet" />
<link href="~/css/DataTable/jquery.dataTables.min.css" rel="stylesheet" />
<link href="~/css/DataTable/rowReorder.dataTables.min.css" rel="stylesheet" />
<link href="~/css/buttons.dataTables.min.css" rel="stylesheet" />
<link href="~/css/rowGroup.dataTables.min.css" rel="stylesheet" />

@*<link href="~/css/DataTable/responsive.dataTables.min.css" rel="stylesheet" />*@

<script src="~/css/DataTable/jquery-3.3.1.js"></script>
@*<script src="~/css/DataTable/jquery-3.5.1.js"></script>*@
<script src="~/css/DataTable/jquery.dataTables.min.js"></script>
<script src="~/css/DataTable/dataTables.rowReorder.min.js"></script>
<script src="~/css/DataTable/moment.min.js"></script>
<script src="~/css/DataTable/datetime-moment.js"></script>
<script src="~/css/DataTable/dataTables.buttons.min.js"></script>
<script src="~/css/DataTable/dataTables.select.min.js"></script>
<script src="~/css/DataTable/dataTables.dateTime.min.js"></script>
<script src="~/css/DataTable/dataTables.editor.min.js"></script>

<script src="~/js/pdfmake/dataTables.rowGroup.min.js"></script>
<script src="~/js/pdfmake/jszip.min.js"></script>
<script src="~/js/pdfmake/pdfmake.min.js"></script>
<script src="~/js/pdfmake/vfs_fonts.js"></script>
<script src="~/js/pdfmake/buttons.html5.min.js"></script>
<script src="~/js/pdfmake/buttons.print.min.js"></script>

<style>
    tr.selected {
        background: red;
        color: red;
    }

    #main {
        position: absolute;
    }

    .color_tap {
        background-color: #5f95c3;
        color: #ffffff;
        font-weight: 600;
        margin-right: 1px;
        min-width: 60px;
    }

    .nav-tabs .nav-link {
        border: 1px solid rgb(193, 193, 193);
        border-radius: 0px 12px 0px 0px;
        height: 40px;
        line-height: 20px;
    }

    .modal {
        z-index: 200000;
    }

    .modal-header {
        background: #5f95c3;
        color: #ffffff;
        height: 40px;
    }

        .modal-header b {
            margin-top: -10px;
        }

    #TbAR table tr td {
        height: 35px;
        margin-left: 15px;
        margin-top: 10px;
        padding: 0px !important;
        position: relative !important;
        /*background-color: none;*/
    }

    table {
        width: 90%;
    }

        table tbody tr td {
            background-color: #ffffff;
            color: black;
        }

        table tbody tr.selected td {
            background: #94d8e1;
            color: red;
        }

            table tbody tr.selected td .clsinput {
                background: #94d8e1;
                color: red;
            }

    input[type="radio"] {
        margin-top: -1px;
        vertical-align: middle;
        height: 28px;
        width: 28px;
    }

    .lbl_rdo {
        font-size: 18px;
        /*font-weight: bold;*/
    }

    .clsinput:focus {
        outline: none;
    }

    /* =================================================== */
    .cover-spin {
        position: fixed;
        width: 100%;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.7);
        z-index: 9999;
        display: none;
    }

    @@-webkit-keyframes spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    .cover-spin::after {
        content: '';
        display: block;
        position: absolute;
        left: 48%;
        top: 40%;
        width: 40px;
        height: 40px;
        border-style: solid;
        border-color: black;
        border-top-color: transparent;
        border-width: 4px;
        border-radius: 50%;
        -webkit-animation: spin .8s linear infinite;
        animation: spin .8s linear infinite;
    }
    /* =================================================== */

    th {
        background-image: none;
        background-color: var(--primary-color);
        color: var(--secondary-color);
        font-size: 12px;
        text-align: center;
    }

    .bgGray {
        background-color: #f0eff1;
    }

    .autocomplete {
        position: relative;
        display: inline-block;
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>
<div id="#main">

    <div id="frmLoading" class="cover-spin" style="display:none"></div>

    <div><h4>Inventory Transfer IM Report</h4></div>
    From : <input type="date" id="txtFromDate" />&nbsp;&nbsp;&nbsp;
    To : <input type="date" id="txtToDate" />
         <div class="autocomplete">
             Customer : <input id="txtCustomer" type="text" name="txtCustomer">
             Sale Employee : <input id="txtSaleEmp" type="text" name="txtSaleEmp">
         </div>
    <button class="btn-sm btn-danger" onclick="fncGetRptIM();">&nbsp;Search&nbsp;</button>

    <div class="table-responsive-sm">
        <table id="TbRptIM" class="table table-bordered  table-striped table-hover display table-sm" style="width: 100%; background: #f0eff1; color: #696969;">
            <thead>
                <tr>
                    <th>CardCode</th>
                    <th>CardName</th>
                    <th>DocNum</th>
                    <th>DocDate</th>
                    <th>BinLocaton</th>
                    <th>ItemCode</th>
                    <th>Description</th>
                    <th>Batch/Serial</th>
                    <th>BN/SN</th>
                    <th>Expire Date</th>
                    <th>Quantity</th>
                    <th>Uom</th>
                    <th>Price</th>
                    <th>DocTotal</th>
                    <th>Balance</th>
                    <th>Sale</th>
                </tr>
            </thead>
        </table>
    </div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        var now = new Date();
        var day = ("0" + now.getDate()).slice(-2);
        var month = ("0" + (now.getMonth() + 1)).slice(-2);
        var today1 = now.getFullYear() + "-" + (month) + "-01";
        var today2 = now.getFullYear() + "-" + (month) + "-" + (day);
        //$('#txtFromDate').val(today1);
        //$('#txtToDate').val(today2);
    });

    var LData = [];

    var collapsedGroups = {};
    var tbRptIM = $('#TbRptIM').DataTable({
        bLengthChange: false,
        binfo: false,
        data: LData,
        columns: [
            { data: "cardCode" },
            { data: "cardName" },
            { data: "docNum" },
            { data: "docDate" },
            { data: "fisrtBin" },
            { data: "itemCode" },
            { data: "dscription" },
            { data: "isBtchSerNum" },
            { data: "batchSerialNumber" },
            { data: "expDate" },
            { data: "quantity" },
            { data: "uomCode" },
            { data: "price", render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { data: "docTotal", render: $.fn.dataTable.render.number(',', '.', 2, '')},
            { data: "balance" },
            { data: "slpName" }
        ],
        "drawCallback": function (settings) {
            var api = this.api();
            var rows = api.rows({ page: 'current' }).nodes();
            var last = null;
            this.api().rows({ page: 'current' }).every(function (rowIdx, tableLoop, rowLoop) {
                var group = this.cell(rowIdx, 2).render('display');
                console.log("ROW " + rowLoop + ": [" + this.cell(rowIdx, 2).render('display') + "]");
                if (last !== group) {
                    $(rows).eq(rowLoop).before(
                        '<tr class="group"><td colspan="16" class="bgGray">' + group + '</td></tr>'
                    );
                    last = group;
                }

            });
        },
        dom: 'Bfrtip',
        buttons: [
            'excel'
        ],
        autoWidth: true,
        pageLength: 30,
        select: false,
        paging: true,
        ordering: false,
    });
    tbRptIM.columns([2]).visible(false, false);


    function fncGetRptIM() {
        document.getElementById("frmLoading").style.display = "block";
        //txtFromDate, txtToDate
        var cFromDate = $("#txtFromDate").val();
        var cToDate = $("#txtToDate").val();
        var FromDateX = ""
        var ToDateX =""

        if (cFromDate !== "" && cToDate !== "") {

            var nowFromDate = new Date(cFromDate);
            var dayFromDate = ("0" + nowFromDate.getDate()).slice(-2);
            var monthFromDate = ("0" + (nowFromDate.getMonth() + 1)).slice(-2);
            var yearFromDate = nowFromDate.getFullYear();
            FromDateX = dayFromDate + monthFromDate + yearFromDate

            var nowToDate = new Date(cToDate);
            var dayToDate = ("0" + nowToDate.getDate()).slice(-2);
            var monthToDate = ("0" + (nowToDate.getMonth() + 1)).slice(-2);
            var yearToDate = nowToDate.getFullYear();
            ToDateX = dayToDate + monthToDate + yearToDate
            console.log(FromDateX + "-" + ToDateX);

            var txtCustomer = $('#txtCustomer').val();
            positionCustomer = txtCustomer.search("-");
            txtCustomer = txtCustomer.substr(0, positionCustomer);
            if (txtCustomer == '') {
                txtCustomer = "empty";
            } else {
                txtCustomer = txtCustomer;
            }

            var txtSaleEmp = $('#txtSaleEmp').val();
            positionSaleEmp = txtSaleEmp.search("-");
            txtSaleEmp = txtSaleEmp.substr(0, positionSaleEmp);
            if (txtSaleEmp == '') {
                txtSaleEmp = "empty";
            } else {
                txtSaleEmp = txtSaleEmp;
            }

            console.log(txtCustomer + "," + txtSaleEmp);

            tbRptIM.clear().draw();
            var Ltmp = [];
            var tmpAdd = {};
            $.ajax({
                url: '@Url.Action("RptTransferIM", "Inventory")',
                data: { fromDate: FromDateX, toDate: ToDateX, customer: txtCustomer, saleEmp: txtSaleEmp},
                type: "GET",
                dataType: "JSON",
                "dataSrc": 'data',
                success: function (data) {
                    console.log("Successfully.");
                    console.log(data);
                    tbRptIM.rows.add(data);
                    tbRptIM.search('').draw();
                    Ltmp = [];
                    tbRptIM.rowGroup().enable().draw();
                    document.getElementById("frmLoading").style.display = "none";
                }
            });

        } else {
            alert("กรุณาเลือกวันที่");
        }


    }


    //AutoComplate Textbox [Customer, SaleEmployee]
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    const dataCustomer = [];
    const dataSaleEmp = [];

    $.ajax({
        url: '@Url.Action("GetCustomerClientResult", "GoodsReceiptPO")',
        data: {
            cusType: 'C'
        },
        type: "GET",
        dataType: "JSON",
        "dataSrc": 'data',
        success: function (data) {
            console.log("Get Customer Successfully.");
            //console.log(data);
            for (let i = 0; i < data.length; i++) {
                dataCustomer.push(data.data[i].cardCode + "-" + data.data[i].cardName);
            }
        }
    });

    $.ajax({
        url: '@Url.Action("GetSaleEmployee", "Home")',
        type: "GET",
        dataType: "JSON",
        "dataSrc": 'data',
        success: function (data) {
            console.log("Get SaleEmployee Successfully.");
            //console.log(data);
            for (let i = 0; i < data.data.length; i++) {
                dataSaleEmp.push(data.data[i].slpCode + "-" + data.data[i].slpName);
            }
        }
    });

    autocomplete(document.getElementById("txtCustomer"), dataCustomer);
    autocomplete(document.getElementById("txtSaleEmp"), dataSaleEmp);
</script>